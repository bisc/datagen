#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Input:: *)
(*(* Evaluating all notebooks prior to running the function *)*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"prob-rules.nb"],Visible-> False]];*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"Independence.nb"],Visible-> False]];*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"oGenerator.nb"],Visible-> False]];*)
(*(* NOTE: MODIFIED INPUT READ *)*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"Parsing_input_modified.nb"],Visible-> False]];*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"Equality_Casing.nb"],Visible-> False]];*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"Main_Static_Generator.nb"],Visible-> False]];*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"timeLists.nb"],Visible-> False]];*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"Main_Time_Invariant_Generator.nb"],Visible-> False]];*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"Stationary.nb"],Visible-> False]];*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"Main_Time_Variant_Generator.nb"],Visible-> False]];*)
(*NotebookEvaluate[NotebookOpen[StringJoin[NotebookDirectory[],"qGenerator.nb"],Visible-> False]];*)
(**)
(*(* Files to Test: *)*)
(**)
(*(* testing/time_variant/VariantEx1.txt *)*)
(*(* testing/time_variant/VariantEx2.txt *)*)
(**)
(*(* testing/time_invariant/InvariantEx1New.txt *)*)
(*(* testing/time_invariant/InvariantEx1.txt *)*)
(**)
(*(* testing/static/StaticExInvariant.txt (Doesn't work, just shows static case) *)*)
(*(* testing/static/StaticExVarEq.txt *)*)
(*(* testing/static/StaticExNot.txt *)*)
(*(* testing/static/StaticExOr.txt *)*)
(*(* testing/static/StaticEx4.txt *)*)
(*(* testing/static/StaticEx3.txt *)*)
(*(* testing/static/StaticEx2.txt *)*)
(*(* testing/static/StaticEx.txt *)*)
(**)
(*(* Proof Files *)*)
(**)
(*(* testing/static/StaticExProof2.txt *)*)
(*(* testing/static/StaticExTesting2.txt *)*)
(**)
(*(* testing/time_invariant/InvariantExTesting3.txt *)*)
(*(* testing/time_invariant/InvariantExProof.txt *)*)
(**)
(*(* testing/time_variant/VariantExProof.txt *)*)
(*(* testing/time_variant/VariantExTesting.txt *)*)
(**)
(*(* testing/paper/StaticExProof2.txt *)*)
(*(* testing/paper/InvariantExProof.txt *)*)
(*(* testing/paper/VariantExProofFinal.txt *)*)
(**)
(*generateData::invalidCase="No such case exists";*)


(* ::Input:: *)
(*generateData[] := *)
(*Module[ {filename, result = {}},*)
(*filename=InputString["Type file name here"];*)
(*If[FileExistsQ[StringJoin[NotebookDirectory[],filename]],*)
(*parse[filename];*)
(*];*)
(*Switch[casetype,*)
(*"static", result = staticGenerate[]; result,*)
(*"timeinvariant", result = invariantGenerate[]; result,*)
(*"timevariant", result = variantGenerate[]; result,*)
(*_, Message[generateData::invalidCase]; $Failed*)
(*]*)
(*]*)
(*generateData[]*)
(*(* Export["timeinvariantoutput.csv", generateData[]] *)*)


(* ::Input:: *)
(*(* For time variant data generation *)*)
(*(**)
(*Clear[fileCheck, runResult, FTL, FOL, TTL, TOL];*)
(*fileCheck="testing/paper/VariantExProofFinal.txt";*)
(*parse[fileCheck];*)
(*FTL = {};*)
(*FOL = {};*)
(*Do[*)
(*TTL = {};*)
(*TOL = {};*)
(*runResult = variantGenerate[];*)
(*Do[*)
(*AppendTo[TTL, runResult[[j]][[1]]];*)
(*AppendTo[TOL, runResult[[j]][[2]]];*)
(*,{j,Length[runResult]}];*)
(*AppendTo[FTL, TTL];*)
(*AppendTo[FOL, TOL];*)
(*,{i, 1000}];*)
(*Export["timevartool.csv", FTL];*)
(*Export["timevarop.csv", FOL];*)
(**)*)
(**)
